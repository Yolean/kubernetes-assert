#!/usr/bin/env bash
[ -z "$DEBUG" ] || set -x
set -eo pipefail

# Settings
DEFAULT_REGISTRY=builds-registry.ystack.svc.cluster.local
[ -z "$BUILDS_REGISTRY" ] && BUILDS_REGISTRY=$DEFAULT_REGISTRY

[ -z "$IMAGE_NAME" ] && echo "IMAGE_NAME is required" && exit 1;

GIT_STATUS=$(git status --untracked-files=no --porcelain=v2)
[ ! -z "$SOURCE_COMMIT" ] || export SOURCE_COMMIT=$(git rev-parse --verify HEAD)
[ -z "$GIT_STATUS" ] || export SOURCE_COMMIT="$SOURCE_COMMIT-dirty"
[ ! -z "$SOURCE_BRANCH" ] || export SOURCE_BRANCH=$(git branch --show-current)

echo "------ HOOK START - BUILD -------"
printenv

PREPEND_REGISTRY=""
case $IMAGE_NAME in
  solsson/* ) ;;
  $BUILDS_REGISTRY* ) PREPEND_REGISTRY="${BUILDS_REGISTRY}/" ;;
  *) ;;
esac

function imagename {
  buildname=$1
  case $IMAGE_NAME in
    *:latest) echo -n $IMAGE_NAME | sed "s|:latest|:$buildname|" ;;
    *:*) echo -n $IMAGE_NAME | sed "s|:\(.*\)|:\1-$buildname|" ;;
    *) echo $IMAGE_NAME:$buildname ;;
  esac
}

docker build -t $IMAGE_NAME .

CONTEXTS="
runtime-nodejs
runtime-typescript
"

PUSH=""

for CONTEXT in $CONTEXTS; do

  CONTEXT_IMAGE_NAME=$(imagename $CONTEXT)

  docker build -t $CONTEXT_IMAGE_NAME -t yolean/assert-$CONTEXT -t ${PREPEND_REGISTRY}yolean/assert-$CONTEXT:$SOURCE_COMMIT ./$CONTEXT
  PUSH="$PUSH $CONTEXT_IMAGE_NAME ${PREPEND_REGISTRY}yolean/assert-$CONTEXT:$SOURCE_COMMIT"

done

echo "PUSH list contains: $PUSH"
[ -z "$NOPUSH" ] || exit 0
for P in $PUSH; do docker push $P; done

echo "------ HOOK END   - BUILD -------"
